openapi: 3.0.3
info:
  title: Six cities - OpenApi 3.0
  description: Six Cities server resources.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: 2.0.0
tags:
  - name: user
    description: Operations about user
  - name: offer
    description: Operations about offers

paths:
  /v1/user/register:
    post:
      tags:
        - user
      summary: Create user
      description: Registers a new user
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createUserRequest'
            application/xml:
              schema:
                $ref: '#/components/schemas/createUserRequest'
            application/x-www-form-urlencoded:
              schema:
                $ref: '#/components/schemas/createUserRequest'
        required: true
      responses:
        "201":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        "409":
          description: A user with this email already exists.

  /v1/users/login:
    post:
      tags:
        - users
      summary: User authorization
      description: Authorizes a user based on login and password.
    get:
      tags:
        - users
      summary: User status check
      description: Returns information on an authorized user.

  /v1/users/logout:
    post:
      tags:
        - users
      summary: User logged out
      description: log out of your account.

  /v1/users/{id}/avatar:
    post:
      tags:
        - users
      summary: Upload avatar image
      description: Loads the user's avatar image. Avatar image must be in `png` or `jpg` format.

  /v1/users/{id}/favorite/offers/add:
    post:
      tags:
        - users
      summary: Add to favorite
      description: Add to favorite.

  /v1/users/{id}/favorite/offers/delete:
    post:
      tags:
        - users
      summary: Delete to favorite
      description: Delete to favorite.

  /v1/offer:
    post:
      tags:
        - offer
      summary: Add a new offer
      description: Add a new offer
      requestBody:
        description: Create a new offer
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Offer'
          application/xml:
            schema:
              $ref: '#/components/schemas/Offer'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Offer'
        required: true
      responses:
        "201":
          description: Successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Offer'
        "401":
          description: Unauthorized

    get:
      tags:
        - offer
      summary: Returns a list of offers
      description: Return a list of offers
      parameters:
        - in: query
          name: limit
          description: Number of offers
          schema:
            type: integer
            default: 60
      responses:
        "200":
          description: Returns offers within the limit
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Offer'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Offer'
        "401":
          description: Unauthorized.

  /v1/offer/{offerId}:
    put:
      tags:
        - offer
      summary: Update an existing offer
      description: Update an existing offer by Id
      parameters:
        - name: offerId
          in: path
          description: ID of offer to return
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an existent offer
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Offer'
          application/xml:
            schema:
              $ref: '#/components/schemas/Offer'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Offer'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Offer'
            application/xml:
              schema:
                $ref: '#/components/schemas/Offer'
        '404':
          description: Offer not found
        "401":
          description: Unauthorized
    get:
      tags:
        - offer
      summary: Find offer by ID
      description: Returns a single offer
      parameters:
        - name: offerId
          in: path
          description: ID of offer to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Offer'
            application/xml:
              schema:
                $ref: '#/components/schemas/Offer'
        '404':
          description: Offer not found
        "401":
          description: Unauthorized
    delete:
      tags:
        - offer
      summary: Deletes an offer
      description: Delete an offer
      parameters:
        - name: offerId
          in: path
          description: ID of offer to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No content
        '404':
          description: Offer not found

  /v1/offer/{offerId}/comments:
    post:
      tags:
        - offer
      summary: Get comments list
      description: ''
      parameters:
        - name: offerId
          in: path
          description: ID of offer to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        '404':
          description: Offer with id not found.

  /v1/offers/{id}/favorite:
    get:
      tags:
        - offers
      summary: Get favorite offers
      description: Get favorite offers.

  /v1/offers/premium:
    get:
      tags:
        - offers
      summary: Premium offers
      description: Get premium offers.
      parameters:
        - in: query
          name: city
          schema:
            type: string
          required: true
          description: Name of the city to get premium offers for.

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: 6329c3d6a04ab1061c6425ea
        firstName:
          type: string
          example: John
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        avatarPath:
          type: string
          example: 'john.jpg'
        type:
          type: string
          example: regular
          enum:
            - regular
            - pro

    Offer:
      type: object
      properties:
        title:
          type: string
          example: Houseboat in Amsterdam
        description:
          type: string
          example: Wooden cabin with sea view located in the Danish nature.
        postDate:
          type: string
          format: date-time
        city:
          type: string
          example: Cologne
        preview:
          type: string
          example: preview.jpg
        photos:
          type: array
          items:
            type: string
          example: ['photo1.jpg', 'photo2.jpg']
        isPremium:
          type: boolean
          example: true
        isFavorite:
          type: boolean
          example: true
        rating:
          type: number
          example: 4.8
        type:
          type: string
          example: house
        roomsCount:
          type: number
          example: 1
        guestsCount:
          type: number
          example: 2
        price:
          type: number
          example: 10500
        amenities:
          type: array
          items:
            type: string
          example: 'Washer'
        user:
          $ref: '#/components/schemas/User'
        latitude:
          type: number
          example: 50.938361
        longitude:
          type: number
          example: 6.959974

    Comment:
      type: object
      properties:
        id:
          type: string
          example: 6329c3d6a04ab1061c6425ea
        text:
          type: string
          example: My first comment
        rating:
          type: number
          example: 4.5
        createdAt:
          type: string
          format: date-time
        user:
          $ref: '#/components/schemas/User'

    createUserRequest:
      type: object
      properties:
        email:
          type: string
          example: john@gmail.com
        firstName:
          type: string
          example: John
        password:
          type: string
          example: 123456
